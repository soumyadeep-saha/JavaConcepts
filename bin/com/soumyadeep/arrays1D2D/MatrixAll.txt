MatrixAll

1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
package com.soumyadeep.arrays1D2D;

public class Convert1dTo2dArray {

	public static void main(String[] args) {

		/*
		 * Explaining the code 
		 * The logic is simple as said earlier. The two dimensional
		 * array contains certain number of rows and cols which are usually the factors
		 * of the single dimensional array size i.e. 5*4 (row*col) is equal to 20 which
		 * is the size of 1-D array.
		 * 
		 * count=0 is a variable whose initial value will be 0. This variable represents
		 * the control which will iterate through the indexes of the 1-D array. So final
		 * value of this will be the size of 1-D array.
		 * 
		 * if(count==d.length) break; Sometimes count can become equal to length of the
		 * 1D array, so upon a[i][j]=d[count]; statement execution, we will get an
		 * exception i.e. when count becomes d.length and when this statement executes,
		 * we get d[d.length] which is absurd, because there will be no index in an
		 * array that is equal to it's length. For you to believe what i said, try
		 * removing one or more elements from the 1-D array and execute keeping this
		 * statement in comments. See what happens. You'll probably get
		 * ArrayIndexOutOfBoundsExecption.
		 * 
		 * a[i][j]=d[count]; Insert the elements into the 2D array. a[0][0] will be
		 * first element, a[0][1] will be second one and so on.
		 * 
		 * count++; Increase the value of count so that next element can be inserted.
		 * 
		 * Print count, you'll get it equal to the no.of elements in the 1-D array.
		 * 
		 * Note that, when 2D array size is more than the 1D array the remaining places
		 * in the 2D array will not be filled. If 1D array size is more than the 2D
		 * array size, then the elements that can be fit into the 2D array will be
		 * inserted, remaining however will not be inserted
		 */

		int[] array1d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
		System.out.println(array1d.length);

		int[][] array2d = new int[5][4];

		int count = 0;
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 4; j++) {
				if (count == array1d.length) {
					break;
				}
				array2d[i][j] = array1d[count];
				// System.out.printf("a[%d][%d]= %d\n", i, j, array2d[i][j]);
				count++;
			}
		}

		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 4; j++) {
				System.out.print(array2d[i][j]);
			}
			System.out.println();
		}

		System.out.println("Count is " + count);

	}
}

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
package com.soumyadeep.arrays1D2D;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Convert1dTo2dArray4Into8 {

	public static void main(String[] args) {

		int[] array1d = { 1, 2, 3, 4, 5, 6, 7, 8 };

		int[][] array2d = new int[4][2];

		System.out.println(array2d[2].length);
		System.out.println(array2d[3].length);

		int count = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 2; j++) {

				if (count == array1d.length) {
					break;
				}

				array2d[i][j] = array1d[count];
				count++;
			}
		}

		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 2; j++) {
				System.out.print(array2d[i][j] + "    ");
			}
			System.out.println();
		}

		List<Integer> list = Arrays.stream(array1d).boxed().collect(Collectors.toList());
		System.out.println(list);
	}
}

333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333
package com.soumyadeep.arrays1D2D;

public class SnakeGameFullSimple {

	public static void main(String[] args) {

		int[][] num = { { 1, 2, 3, 4, 5 }, { 6, 7, 8, 9, 10 }, { 11, 12, 13, 14, 15 }, { 16, 17, 18, 19, 20 },
				{ 21, 22, 23, 24, 25 } };

		System.out.println(num[0].length);
		System.out.println(num[1].length);

		// Traverse through all rows
		for (int i = 0; i < 5; i++) {

			if (i % 2 == 0) {
				// If current row is even, print from
				// left to right
				for (int j = 0; j < 5; j++) {
					System.out.print(num[i][j] + "	");
				}
			} else {
				// If current row is odd, print from
				// right to left
				for (int j = 4; j >= 0; j--) {
					System.out.print(num[i][j] + "	");
				}
			}
			System.out.println();
		}
	}
}

4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444
package com.soumyadeep.arrays1D2D;

public class SnakeGameSimple {

	public static void main(String[] args) {
		int[] array1d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
		int[][] array2d = new int[4][4];
		int count = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j <= i; j++) {

				if (count == array1d.length) {
					break;
				}
				array2d[i][j] = array1d[count];
				count++;
			}
		}

		System.out.println("Normal form");
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j <= i; j++) {
				System.out.print(array2d[i][j] + "    ");
			}
			System.out.println();
		}

		System.out.println("Snake form");
		// Traverse through all rows
		for (int i = 0; i < 4; i++) {
			// If current row is even, print from
			// left to right
			if (i > 1 && i % 2 == 0) {
				for (int j = i; j >= 0; j--) {
					System.out.print(array2d[i][j] + "    ");
				}
			} else {
				// If current row is odd, print from
				// right to left
				for (int j = 0; j <= i; j++) {
					System.out.print(array2d[i][j] + "    ");
				}
			}
			System.out.println();
		}
	}
}

555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
package com.soumyadeep.arrays1D2D;

public class MatrixInSpiralFormSimple1D {

	public static void main(String[] args) {

		int[][] a = { { 1, 2, 3, 4, 5 }, { 6, 7, 8, 9, 10 }, { 11, 12, 13, 14, 15 }, { 16, 17, 18, 19, 20 },
				{ 21, 22, 23, 24, 25 } };
		System.out.println(a.length);

		int rs = 0;
		int re = a.length;
		int cs = 0;
		int ce = a.length;
		int i;
		while (rs < re && cs < ce) {

			// Print the first row from the remaining rows
			for (i = cs; i < ce; ++i) {
				System.out.print(" " + a[rs][i]);
			}
			rs++;

			// Print the last column from the remaining columns
			for (i = rs; i < re; ++i) {
				System.out.print(" " + a[i][ce - 1]);
			}
			ce--;

			// Print the last row from the remaining rows
			if (rs < re) {
				for (i = ce - 1; i >= 1; --i) {
					System.out.print(" " + a[re - 1][i]);
				}
				re--;
			}
			// Print the first column from the remaining columns
			if (cs < ce) {
				for (i = re - 1; i >= rs; --i) {
					System.out.print(" " + a[i][cs]);
				}
				cs++;
			}
		}
	}
}
6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
package com.soumyadeep.arrays1D2D;

import java.util.Scanner;

public class MatrixInSpiralForm {

	public static void main(String[] args) {
		System.out.println("Enter The Value For N :");

		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();

		int[][] spiral = new int[n][n];

		int value = 1;

		int minCol = 0;

		int maxCol = n - 1;

		int minRow = 0;

		int maxRow = n - 1;

		while (value <= n * n) {
			for (int i = minCol; i <= maxCol; i++) {
				spiral[minRow][i] = value;

				value++;
			}

			for (int i = minRow + 1; i <= maxRow; i++) {
				spiral[i][maxCol] = value;

				value++;
			}

			for (int i = maxCol - 1; i >= minCol; i--) {
				spiral[maxRow][i] = value;

				value++;
			}

			for (int i = maxRow - 1; i >= minRow + 1; i--) {
				spiral[i][minCol] = value;

				value++;
			}

			minCol++;

			minRow++;

			maxCol--;

			maxRow--;
		}

		for (int i = 0; i < spiral.length; i++) {
			for (int j = 0; j < spiral.length; j++) {
				System.out.print(spiral[i][j] + "\t");
			}

			System.out.println();
		}
	}
}
777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
package com.soumyadeep.arrays1D2D;

public class MatrixInSpiralForm2Geeks {

	public static void main(String[] args) {

		int[][] a = new int[100][100];
		System.out.println(a.length);

		// Initialize value to be filled in matrix
		int val = 1;
		int k = 0;
		int l = 0;
		int m = 4;
		int n = 4;
		while (k < m && l < n) {
			/*
			 * Print the first row from the remaining rows
			 */
			for (int i = l; i < n; ++i) {
				a[k][i] = val++;
			}

			k++;

			/*
			 * Print the last column from the remaining columns
			 */
			for (int i = k; i < m; ++i) {
				a[i][n - 1] = val++;
			}
			n--;

			/*
			 * Print the last row from the remaining rows
			 */
			if (k < m) {
				for (int i = n - 1; i >= l; --i) {
					a[m - 1][i] = val++;
				}
				m--;
			}

			/*
			 * Print the first column from the remaining columns
			 */
			if (l < n) {
				for (int i = m - 1; i >= k; --i) {
					a[i][l] = val++;
				}
				l++;
			}
		}
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(a[i][j] + " ");
			}
			System.out.println("");
		}
	}
}
}